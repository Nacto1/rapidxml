- - todo
* - done
= - not to be done after analysis/trials

* Create proper memory_pool that will expand as needed
* Move printing internals into xml_document
* Make separate list for attributes in xml_node
* Create way to access node data/children/attributes etc.
* Use node access functions to print node, instead of hacking by using friend
* Somehow make parameterless xml_node constructor private, add costructor that takes node type to prevent untyped nodes on user side
* add has_children(), has_attributes() functions
* move printing functions to be part of xml_node
* move parsing functions to be part of xml_node
* Make xml_document inherit from xml_node instead of root() method - what about node creation and pool?
* Add table-based character lookup for 8 bit characters; handle bigger characters by looking up only on lsb (and testing rest of bytes for 0)
* Add parsing of comments
* Add parsing of header & PIs etc.
* Optimize &#... character entities
* Create way to modify data/children/attributes etc, use modifying functions to build nodes during parse
* Add possibility to configure parsing process during compile time by using template parameters
	* . destructive parsing (yes/no) (no implies terminators and char ref expansion disabled)
	* . place terminators (yes/no)
	* . expand character references (yes/no)
	* . size of static array in document nodes pool (int)
	* . parse header (yes/no)
	* . parse comments (yes/no)
	* . create separate data nodes (yes/no), also update printing
	* . trim whitespace around data (yes/no)
	* . validate closing tags names
	= . use table based character classification (yes/no)
* add trimming of whitespace around data
* Add recognition of byte-order-markers
* Add generation of utf8 sequences for &#xxx where xxx>127
* Add parsing attributes of header
* Add parsing of CDATA
* Add printing of CDATA nodes
* Add parsing of DOCTYPE
* Test for malformed XMLs by adding random characters in the middle of valid document that contains all supported constructs. Also by truncating it by putting 0 on every character in turn.
* Add separate class for attributes, speed gain expected as less initialization and memory is needed for it
* Add tests for interface
* Add way to supply custom allocator for nodes (if supplied, use placement new instead of regular new)
* Add find to be able to find children/attributes by name
* Rename to rapidxml
* Remove flags template argument from document and move to parse function (if possible?)
* Remove printing and move it to a separate file
* Fix const correctness of nodes/document
* Add parsing of PIs and add PI nodes
* Add DOCTYPE nodes
* Create Doxygen documentation
* Modify flags prefixes
* Create common tests header that will contain CHECK, failure/success counters, print_test_results() and XML loading from stream
* Create rapidxml_utils that will contain file and some helper function (count children/attributes etc)
* Rename node_pool to memory_pool
* Move documentation html files to root directory
* Add test for RAPIDXML_NO_EXCEPTIONS
* Create character refs when printing
* Add tests that parse and test contents of various node types: pi, doctype, cdata, element+attributes etc.
* Add flags to printing
* Determine if having input character other than char is ever going to be useful (for example to parse UTF-16), otherwise remove it
* Add display of base classes to docs
* Document node_*, make sure it shows in docs
* Document parse_*, make sure it shows in docs
* Document meaning of name and value for all node types, make sure it shows in docs
* Make document inherit from memory_pool instead of aggregating
* Remove single-param versions of name() and value(), add default value to size instead; update other code that uses them
* in printer, if node has only one data child (and no other children), do not put it in a separate line
* Rename first_child etc. to first_node
= Convert all functions taking Ch* reference to take Ch* by value and return new Ch* - this can potentially be lots faster
= Make private, parameterless constructor not initialize any members to speed up allocations
= Make parameterless constructor private (but it must be present so that pool can allocate arrays of nodes)
= Investigate why iterator can access private members of xml_node
= (?) Add decrement on iterator. It will have to correctly move back from end() position
= Check if condition on start of parse_node is needed, perhaps move it to the caller
= Add second version of print that takes stream
= Add alignment support to memory_pool
= Rename RAPIDXML_PARSE_ERROR to RAPIDXML_ERROR, parse_error to error etc.

- Factor numeric char entities into a separate function
- Treat CDATA the same way as data, i.e. put it into value of parent
- Add test for custom allocator
- Separate whitespace trimming from condensing
- Reduce amount of text printed by tests
- Add utf16 support - how to handle endiannes?
- Add tests for parse_*** flags
- Add test description on top of each test file
- Add way to allocate any objects from the pool (e.g. strings)
- Allow allocation of arbitrary size blocks by memory_pool
- Add flag to create data nodes which contain only whitespace
- Fix allocate_attribute() comment
- Fix comments about undefined behaviour when certain pointers are NULL (behaviour is now defined)
- Split errors into 2 classes: parse errors (parse_error) and other errors (error). parse_error should inherit error.
- Add extra parameter to name() and value() (of type memory_pool) that will cause them to allocate a copy of given string from this pool. If 0, it should just assign pointer as currently.
- Add extra bool parameter to allocate_node & allocate_attribute
- Rename allocate_node etc. to create_node etc.
- memory_pool implementation is a little fishy, not sure this is fully portable, but works on VC and gcc
- add more examples and make examples in docs checked by tests
