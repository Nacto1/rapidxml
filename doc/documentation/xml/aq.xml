<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.4.7">
  <compounddef id="aq" kind="page">
    <compoundname>aq</compoundname>
    <title>is RapidXml?</title>
    <detaileddescription>
<para><emphasis>Copyright (C) 2006, 2007 Marcin Kalicinski</emphasis> <linebreak/>
 <emphasis>See accompanying file <ulink url="license.txt">license.txt</ulink> for license information.</emphasis> <heading level="2">Table of Contents</heading>
</para><para> <toc></toc>  <linebreak/>
</para><sect1 id="aq_1what_is_rapidxml">
<title>What is RapidXml?</title>
<para>RapidXml is an attempt to create the fastest XML DOM parser possible, while retaining useability, portability and reasonable W3C compatibility. It is an in-situ parser written in C++, with parsing speed approaching that of <computeroutput>strlen()</computeroutput> function executed on the same data. <linebreak/>
<linebreak/>
 Entire parser is contained in a single header file, so no building or linking is neccesary. To use it you just need to copy <computeroutput>rapidxml.hpp</computeroutput> file to a convenient place (such as your project directory), and include it where needed. You may also want to use utilities contained in headers <computeroutput>rapidxml_print.hpp</computeroutput> and <computeroutput>rapidxml_utils.hpp</computeroutput>, although these are not documented.</para><sect2 id="aq_1dependencies_and_compatibility">
<title>Dependencies And Compatibility</title>
<para>RapidXml has <emphasis>no dependencies</emphasis> other than a very small subset of standard C++ library (namely <computeroutput>&lt;cassert&gt;</computeroutput>, <computeroutput>&lt;cstdlib&gt;</computeroutput>, <computeroutput>&lt;new&gt;</computeroutput> and <computeroutput>&lt;exception&gt;</computeroutput>, unless exceptions are disabled). It should compile on any reasonably conformant compiler, and was tested on Visual C++ 2003, Visual C++ 2005, gcc 3, gcc 4, and Comeau 4.3.3. Care was taken that no warnings are produced on these compilers, even with highest warning levels enabled.</para></sect2>
<sect2 id="aq_1character_types_and_encodings">
<title>Character Types And Encodings</title>
<para>RapidXml is character type agnostic, and can work both with narrow and wide characters. Current version only fully supports UTF-8, so use of wide characters is somewhat incapacitated. However, it should succesfully parse <computeroutput>wchar_t</computeroutput> strings containing UTF-16 or UTF-32 (depending on the <computeroutput>wchar_t</computeroutput> size), provided that endianness of the data matches that of the machine. This is often the case if data was loaded by use of standard library streams working in text mode.</para></sect2>
<sect2 id="aq_1error_handling">
<title>Error Handling</title>
<para>By default, RapidXml uses C++ exceptions to report errors. If this behaviour is undesirable, RAPIDXML_NO_EXCEPTIONS can be defined to suppress exception code. See parse_error class and parse_error_handler() function for more information.</para></sect2>
<sect2 id="aq_1memory_allocation">
<title>Memory Allocation</title>
<para>RapidXml uses a special memory pool object to allocate nodes and attributes, because direct allocation using <computeroutput>new</computeroutput> operator would be far too slow. Underlying memory allocations performed by the pool can be customized by use of memory_pool::set_allocator() function. See class memory_pool for more information.</para></sect2>
<sect2 id="aq_1w3c_compliance">
<title>W3C Compliance</title>
<para>RapidXml is not a W3C compliant parser, primarily because it ignores DOCTYPE declarations. There is a number of other, minor incompatibilities as well. Still, it can successfully parse and produce complete trees of all valid XML files in W3C conformance suite (over 1000 files specially designed to find flaws in XML processors). In destructive mode it performs whitespace normalization and character entity substitution for a small set of built-in entities.</para></sect2>
<sect2 id="aq_1api_design">
<title>API Design</title>
<para>RapidXml API is minimalistic, to reduce code size as much as possible, and facilitate use in embedded environments. Additional convenience functions are provided in separate headers: <computeroutput>rapidxml_utils.hpp</computeroutput> and <computeroutput>rapidxml_print.hpp</computeroutput>. Contents of these headers is not an essential part of the library, and is currently not documented (otherwise than with comments in code).</para></sect2>
<sect2 id="aq_1reliability">
<title>Reliability</title>
<para>RapidXml is very robust and comes with a large harness of unit tests. Special care has been taken to ensure stability of the parser no matter what source text is thrown at it. One of the unit tests produces 100,000 randomly corrupted variants of XML document, which (when uncorrupted) contains all constructs recognized by RapidXml. RapidXml passes this test when it correctly recognizes that errors have been introduced, and does not crash or loop indefinitely. <linebreak/>
<linebreak/>
 Another unit test puts RapidXml head-to-head with another, well estabilished XML parser, and verifies that their outputs match across a wide variety of small and large documents. <linebreak/>
<linebreak/>
 Yet another test feeds RapidXml with over 1000 test files from W3C compliance suite, and verifies that correct results are obtained. There are also additional tests that verify each API function separately, and test that various parsing modes work as expected.</para></sect2>
<sect2 id="aq_1acknowledgements">
<title>Acknowledgements</title>
<para>I would like to thank Arseny Kapoulkine for creating <ulink url="http://code.google.com/p/pugixml">pugixml</ulink>, which was an inspiration for this project. Additional thanks go to Kristen Wegner for creating <ulink url="http://www.codeproject.com/soap/pugxml.asp">pugxml</ulink>, from which pugixml was derived.</para></sect2>
</sect1>
<sect1 id="aq_1two_minute_tutorial">
<title>Two Minute Tutorial</title>
<sect2 id="aq_1paring">
<title>Parsing</title>
<para>The following code causes RapidXml to parse a zero-terminated string named <computeroutput>text</computeroutput>: <preformatted>
    using namespace rapidxml;
    xml_document&lt;char&gt; doc;    // char is the type of character to be used
    doc.parse&lt;0&gt;(text);        // 0 means default parse flags
    </preformatted> <computeroutput>doc</computeroutput> object is now a root of DOM tree containing representation of the parsed XML. Because all RapidXml interface is contained inside namespace <computeroutput>rapidxml</computeroutput>, users must either bring contents of this namespace into scope, or fully qualify all the names. Class xml_document represents a root of the DOM hierarchy. By means of public inheritance, it is also an xml_node and a memory_pool. Template parameter of xml_document::parse() function is used to specify parsing flags, with which you can fine-tune behaviour of the parser. Note that flags must be a compile-time constant.</para></sect2>
<sect2 id="aq_1accessing_dom_tree">
<title>Accessing The DOM Tree</title>
<para>To access the DOM tree, use methods of xml_node and xml_attribute classes: <preformatted>
    std::cout &lt;&lt; &quot;Name of my first node is: &quot; &lt;&lt; doc.first_node()-&gt;name() &lt;&lt; &quot;\n&quot;;
    xml_node&lt;char&gt; *node = doc.first_node(&quot;foobar&quot;);
    std::cout &lt;&lt; &quot;Node foobar has value &quot; &lt;&lt; node-&gt;value() &lt;&lt; &quot;\n&quot;;
    for (xml_attribute&lt;char&gt; *attr = node-&gt;first_attribute();
         attr; attr = attr-&gt;next_attribute())
    {
        std::cout &lt;&lt; &quot;Node foobar has attribute &quot; &lt;&lt; attr-&gt;name() &lt;&lt; &quot; &quot;;
        std::cout &lt;&lt; &quot;with value &quot; &lt;&lt; attr-&gt;value() &lt;&lt; &quot;\n&quot;;
    }
    </preformatted></para></sect2>
<sect2 id="aq_1modifying_dom_tree">
<title>Modifying The DOM Tree</title>
<para>DOM tree produced by the parser is fully modifiable. Nodes and attributes can be added/removed, and their contents changed. The below example creates a HTML document, whose sole contents is a link to google.com website: <preformatted>
    xml_document&lt;char&gt; doc;
    xml_node&lt;char&gt; *node = doc.allocate_element(&quot;a&quot;, &quot;Google&quot;);
    doc.append_child(node);
    xml_attribute&lt;char&gt; *attr = doc.allocate_attribute(&quot;href&quot;, &quot;google.com&quot;);
    node-&gt;append_attribute(attr);
    </preformatted> One quirk is that nodes and attributes <emphasis>do not own</emphasis> the text of their names and values. This is because normally they only store pointers to the source text. So, when assigning a new name or value to the node, care must be taken to ensure proper lifetime of the string. The easiest way to achieve it is to allocate the string from the xml_document memory pool. In the above example this is not necessary, because we are only assigning character constants. But the code below uses memory_pool::allocate_string() function to allocate node name (which will have the same lifetime as the document), and assigns it to a new node: <preformatted>
    xml_document&lt;char&gt; doc;
    char *node_name = doc.allocate_string(name);        // Allocate string and copy name into it
    xml_node&lt;char&gt; *node = doc.allocate_node(node_element);
    node-&gt;name(node_name);      // Set node name to node_name
    </preformatted> Check <ref refid="aq_1reference" kindref="member">Reference</ref>  section for description of the entire interface.</para></sect2>
</sect1>
<sect1 id="aq_1differences">
<title>Differences From Regular XML Parsers</title>
<para>RapidXml is an <emphasis>in-situ parser</emphasis>, which allows it to achieve very high parsing speed. In-situ means that parser does not make copies of strings. Instead, it places pointers to the <emphasis>source text</emphasis> in the DOM hierarchy.</para><sect2 id="aq_1lifetime_of_source_text">
<title>Lifetime Of Source Text</title>
<para>In-situ parsing requires that source text lives at least as long as the document object. If source text is destroyed, names and values of nodes in DOM tree will become destroyed as well. Additionally, whitespace processing, character entity translation, and zero-termination of strings require that source text be modified during parsing (but see non-destructive mode). This makes the text useless for further processing once it was parsed by RapidXml. <linebreak/>
<linebreak/>
 In many cases however, these are not serious issues.</para></sect2>
<sect2 id="aq_1ownership_of_strings">
<title>Ownership Of Strings</title>
<para>Nodes and attributes produced by RapidXml do not own their name and value strings. They merely hold the pointers to them. This means you have to be careful when setting these values manually. Care must be taken to ensure that lifetime of the string passed is at least as long as of the node/attribute. The easiest way to achieve it is to allocate the string from memory_pool owned by the document. Use memory_pool::allocate_string() function for this purpose.</para></sect2>
<sect2 id="aq_1destructive_non_destructive">
<title>Destructive Vs Non-Destructive Mode</title>
<para>By default, the parser modifies source text during the parsing process. This is required to achieve character entity translation, whitespace normalization, and zero-termination of strings. <linebreak/>
<linebreak/>
 In some cases this behaviour may be undesirable, for example if source text resides in read only memory, or is mapped to memory directly from file. By using appropriate parser flags (parse_non_destructive), source text modifications can be disabled. However, because RapidXml does in-situ parsing, it obviously has the following side-effects:<itemizedlist>
<listitem><para>no whitespace normalization is done</para></listitem><listitem><para>no entity reference translation is done</para></listitem><listitem><para>names and values are not zero-terminated, you must use xml_base::name_size() and xml_base::value_size() functions to tell where they end</para></listitem></itemizedlist>
</para></sect2>
</sect1>
<sect1 id="aq_1performance">
<title>Performance</title>
<para>RapidXml achieves its speed through use of several techniques:<itemizedlist>
<listitem><para>In-situ parsing. When building DOM tree, RapidXml does not make copies of string data, such as node names and values. Instead, it stores pointers to interior of the source text.</para></listitem><listitem><para>Use of template metaprogramming techniques. This allows it to move much of the work to compile time. Through magic of the templates, C++ compiler generates a separate copy of parsing code for any combination of parser flags you use. In each copy, all possible decisions are made at compile time and all unused code is omitted.</para></listitem><listitem><para>Extensive use of lookup tables for parsing.</para></listitem><listitem><para>Hand-tuned C++ with profiling done on several most popular CPUs.</para></listitem></itemizedlist>
</para><para>This results in a very small and fast code: a parser which is custom tailored to exact needs with each invocation.</para><sect2 id="aq_1performance_charts">
<title>Comparison With Other Parsers</title>
<para>The table below compares speed of RapidXml to some other parsers, and to <computeroutput>strlen()</computeroutput> function executed on the same data. On modern CPU (as of 2007), you can expect parsing throughput to be close to 1 GB/s. As a rule of thumb, parsing speed is about 50-100x faster than Xerces DOM, 30-60x faster than TinyXml, 3-12x faster than pugxml, and about 5% - 30% faster than pugixml, the fastest XML parser I know of.</para><para><itemizedlist>
<listitem>
<para>The test file is a real-world, 50kB large, moderately dense XML file. </para></listitem>
<listitem>
<para>All timing is done by using RDTSC instruction present in Pentium-compatible CPUs. </para></listitem>
<listitem>
<para>No profile-guided optimizations are used. </para></listitem>
<listitem>
<para>All parsers are running in their fastest modes. </para></listitem>
<listitem>
<para>The results are given in CPU cycles per character, so frequency of CPUs is irrelevant. </para></listitem>
<listitem>
<para>The results are minimum values from a large number of runs, to minimize effects of operating system activity, task switching, interrupt handling etc. </para></listitem>
<listitem>
<para>A single parse of the test file takes about 1/10th of a millisecond, so with large number of runs there is a good chance of hitting at least one no-interrupt streak, and obtaining undisturbed results. </para></listitem>
</itemizedlist>
<table rows="9" cols="7"><row>
<entry thead="yes"><para><center>Platform</center> </para></entry><entry thead="yes"><para><center>Compiler</center> </para></entry><entry thead="yes"><para>strlen() </para></entry><entry thead="yes"><para>RapidXml </para></entry><entry thead="yes"><para>pugixml 0.3 </para></entry><entry thead="yes"><para>pugxml </para></entry><entry thead="yes"><para>TinyXml  </para></entry></row>
<row>
<entry thead="no"><para><center>Pentium 4</center> </para></entry><entry thead="no"><para><center>MSVC 8.0</center> </para></entry><entry thead="no"><para><center>2.5</center> </para></entry><entry thead="no"><para><center>5.4</center> </para></entry><entry thead="no"><para><center>7.0</center> </para></entry><entry thead="no"><para><center>61.7</center> </para></entry><entry thead="no"><para><center>298.8</center>  </para></entry></row>
<row>
<entry thead="no"><para><center>Pentium 4</center> </para></entry><entry thead="no"><para><center>gcc 4.1.1</center> </para></entry><entry thead="no"><para><center>0.8</center> </para></entry><entry thead="no"><para><center>6.1</center> </para></entry><entry thead="no"><para><center>9.5</center> </para></entry><entry thead="no"><para><center>67.0</center> </para></entry><entry thead="no"><para><center>413.2</center>  </para></entry></row>
<row>
<entry thead="no"><para><center>Core 2</center> </para></entry><entry thead="no"><para><center>MSVC 8.0</center> </para></entry><entry thead="no"><para><center>1.0</center> </para></entry><entry thead="no"><para><center>4.5</center> </para></entry><entry thead="no"><para><center>5.0</center> </para></entry><entry thead="no"><para><center>24.6</center> </para></entry><entry thead="no"><para><center>154.8</center>  </para></entry></row>
<row>
<entry thead="no"><para><center>Core 2</center> </para></entry><entry thead="no"><para><center>gcc 4.1.1</center> </para></entry><entry thead="no"><para><center>0.6</center> </para></entry><entry thead="no"><para><center>4.6</center> </para></entry><entry thead="no"><para><center>5.4</center> </para></entry><entry thead="no"><para><center>28.3</center> </para></entry><entry thead="no"><para><center>229.3</center>  </para></entry></row>
<row>
<entry thead="no"><para><center>Athlon XP</center> </para></entry><entry thead="no"><para><center>MSVC 8.0</center> </para></entry><entry thead="no"><para><center>3.1</center> </para></entry><entry thead="no"><para><center>7.7</center> </para></entry><entry thead="no"><para><center>8.0</center> </para></entry><entry thead="no"><para><center>25.5</center> </para></entry><entry thead="no"><para><center>182.6</center>  </para></entry></row>
<row>
<entry thead="no"><para><center>Athlon XP</center> </para></entry><entry thead="no"><para><center>gcc 4.1.1</center> </para></entry><entry thead="no"><para><center>0.9</center> </para></entry><entry thead="no"><para><center>8.2</center> </para></entry><entry thead="no"><para><center>9.2</center> </para></entry><entry thead="no"><para><center>33.7</center> </para></entry><entry thead="no"><para><center>265.2</center>  </para></entry></row>
<row>
<entry thead="no"><para><center>Pentium 3</center> </para></entry><entry thead="no"><para><center>MSVC 8.0</center> </para></entry><entry thead="no"><para><center>2.0</center> </para></entry><entry thead="no"><para><center>6.3</center> </para></entry><entry thead="no"><para><center>7.0</center> </para></entry><entry thead="no"><para><center>30.9</center> </para></entry><entry thead="no"><para><center>211.9</center>  </para></entry></row>
<row>
<entry thead="no"><para><center>Pentium 3</center> </para></entry><entry thead="no"><para><center>gcc 4.1.1</center> </para></entry><entry thead="no"><para><center>1.0</center> </para></entry><entry thead="no"><para><center>6.7</center> </para></entry><entry thead="no"><para><center>8.9</center> </para></entry><entry thead="no"><para><center>35.3</center> </para></entry><entry thead="no"><para><center>316.0</center>  </para></entry></row>
</table>
<emphasis>(*) All results are in CPU cycles per character of source text</emphasis></para></sect2>
</sect1>
<sect1 id="aq_1reference">
<title>Reference</title>
<para>This section lists all classes, functions, constants etc. and describes them in detail. </para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
